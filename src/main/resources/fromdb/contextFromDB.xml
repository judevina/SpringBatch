<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd    
    http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- 1) USE ANNOTATIONS TO CONFIGURE SPRING BEANS -->
	<context:component-scan base-package="com.batch" />

	<!-- 2) DATASOURCE, TRANSACTION MANAGER AND JDBC TEMPLATE -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3310/TEST" />
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- 3) JOB REPOSITORY - WE USE IN-MEMORY REPOSITORY FOR OUR EXAMPLE -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- 4) LAUNCH JOBS FROM A REPOSITORY -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<!-- 5) Define the job and its steps. In our case I use one step. Configure
		its readers and writers -->
	<batch:job id="simpleJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cursorReader" writer="multiFileWriter"
					commit-interval="2" />
            <!-- LedgerFooterCallback extends StepExecutionListenerSupport. so footerCallback is present as  -->
            <!-- listener for the step -->
            <batch:listeners>
                <batch:listener ref="footerCallback"/>
            </batch:listeners>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- ======================================================= -->
	<!-- 6) READER (JdbcCursorItemReader) -->
    <!--    JdbcCursorItemReader used to execute sql queries     -->
	<!-- ======================================================= -->
	<bean id="jdbcCursorReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="select * from ledger where mbr_nm = ?" />
		<property name="rowMapper" ref="ledgerRowMapper" />
        <property name="ignoreWarnings" value="true" />
        <!-- fetchSize : retrieves data in fixed-sized groups. -->
        <property name="fetchSize" value="100" />
        <!-- maxRows : Maximum Number of rows to fetch from DB. -->
        <property name="maxRows" value="-1" />
        <!-- preparedStatementSetter : pass the parameters to the sql query. -->
        <property name="preparedStatementSetter" ref="passStatementSetter" />
	</bean>

    <!-- ============================================================== -->
    <!-- 6) READER (StoredProcedureItemReader) -->
    <!--    StoredProcedureItemReader used to execute stored procedures -->
    <!-- ============================================================== -->
    <bean id="spCursorReader"
          class="org.springframework.batch.item.database.StoredProcedureItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="procedureName" value="sp_ledger" />
        <property name="rowMapper" ref="ledgerRowMapper" />
        <property name="ignoreWarnings" value="true" />
        <!-- fetchSize : retrieves data in fixed-sized groups. -->
        <property name="fetchSize" value="100" />
    </bean>

    <!-- ======================================================= -->
    <!-- 6) READER (JdbcPagingItemReader)                        -->
    <!--    JdbcPagingItemReader used to execute sql queries     -->
    <!-- ======================================================= -->
    <bean id="cursorReader"
          class="org.springframework.batch.item.database.JdbcPagingItemReader">
        <property name="dataSource" ref="dataSource" />
        <property name="queryProvider" ref="pagingQueryProvider" />
        <property name="pageSize" value="1000" />
        <property name="rowMapper" ref="ledgerRowMapper" />
    </bean>

    <bean id="pagingQueryProvider" class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="selectClause" value="*"/>
        <property name="fromClause" value="ledger"/>
        <!-- sortKeys introduced in spring-core-2.2.0.BUILD-SNAPSHOT to support multi-columns in Order clause -->
        <!-- To incorporate this feature, in the POM.xml repositories url                                     -->
        <!-- <url>http://s3.amazonaws.com/maven.springframework.org/snapshot</url> is introduced              -->
        <!-- TODO : Take the final build once 2.2.0 is released in spring-batch-core                          -->
        <property name="sortKeys">
            <map>
                <entry key="id" value="ASCENDING" />
                <entry key="rcv_dt" value="ASCENDING" />
            </map>
        </property>
    </bean>

    <!-- ======================================================= -->
	<!-- 7) WRITER -->
	<!-- ======================================================= -->
	<bean id="flatFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:c:/Temp/ledgers-output.txt" />
		<property name="lineAggregator" ref="formatterLineAggrId" />
        <!-- The property appendAllowed is useful when we need to append to the already existing field.        -->
        <!-- If set as false, we also need to set the property shouldDeleteIfExists as true                    -->
        <property name="appendAllowed" value="false" />
        <property name="shouldDeleteIfExists" value="true" />
        <property name="headerCallback" ref="headerCallback" />
        <property name="footerCallback" ref="footerCallback" />
	</bean>

    <bean id="formatterLineAggrId" class="org.springframework.batch.item.file.transform.FormatterLineAggregator">
        <property name="format" value="%3s%-10s%-20s%6.2f" />
        <property name="fieldExtractor" ref="beanWrapperFieldExtractorId">
        </property>
    </bean>

    <bean id="delimitedLineAggrId" class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
        <property name="delimiter" value="|" />
        <property name="fieldExtractor" ref="ledgerFieldExtractorId">
        </property>
    </bean>

    <bean id="beanWrapperFieldExtractorId" class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
        <property name="names" value="id,receiptDate,memberName,depositAmount" />
    </bean>

    <bean id="passThroughFieldExtractorId" class="org.springframework.batch.item.file.transform.PassThroughFieldExtractor" />

    <!-- Custom Extractor created -->
    <bean id="ledgerFieldExtractorId" class="com.batch.fromdb.LedgerFieldExtractor" />

    <bean id="passThroughLineAggrId" class="org.springframework.batch.item.file.transform.PassThroughLineAggregator" />

    <bean id="headerCallback" class="com.batch.fromdb.LedgerHeaderCallback" />

    <bean id="footerCallback" class="com.batch.fromdb.LedgerFooterCallback" />

    <bean id="multiFileWriter" class="org.springframework.batch.item.file.MultiResourceItemWriter" scope="step" >
        <property name="resource" value="file:c:/Temp/ledgers-output.txt" />
        <property name="itemCountLimitPerResource" value="4" />
        <property name="delegate" ref="flatFileWriter" />
    </bean>

</beans>

